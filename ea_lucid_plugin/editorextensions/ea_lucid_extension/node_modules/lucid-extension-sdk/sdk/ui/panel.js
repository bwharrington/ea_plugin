"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Panel = exports.PanelLocation = void 0;
const iframeui_1 = require("./iframeui");
/**
 * Semantic locations to place a new menu item.
 */
var PanelLocation;
(function (PanelLocation) {
    /** In Lucidchart, create a sibling to the Contextual Panel */
    PanelLocation[PanelLocation["RightDock"] = 1] = "RightDock";
})(PanelLocation = exports.PanelLocation || (exports.PanelLocation = {}));
/**
 * Extend this class to show a custom panel to the user, whose contents are displayed in a sandboxed
 * iframe controlled by your extension.
 *
 * To pass a message to a script running in the panel, call sendMessage. The data you pass in will be
 * sent to the iframe with window.postMessage.
 *
 * To pass messages back from the panel to this class, call parent.postMessage from within the iframe.
 * The data sent will be passed along to the messageFromFrame implementation on your Panel class.
 */
class Panel extends iframeui_1.IframeUI {
    constructor(client, config) {
        super(client);
        this.config = config;
        this.hookMessages();
        this.client.sendCommand("rp" /* RegisterPanel */, {
            'n': this.messageActionName,
            't': this.config.title,
            'l': this.config.location,
            'c': this.config.content,
            'v': this.config.visibleAction,
            'i': this.config.iconUrl,
        });
    }
    /**
     * Show this panel in its specified location, if it is not already visible.
     */
    show() {
        this.client.sendCommand("spn" /* ShowPanel */, { 'n': this.messageActionName });
    }
    /**
     * Hide this panel if it is currently visible.
     */
    hide() {
        this.client.sendCommand("hp" /* HidePanel */, { 'n': this.messageActionName });
    }
}
exports.Panel = Panel;
