import { EditorClient } from '../editorclient';
import { IframeUI } from './iframeui';
/**
 * Configuration required to display a [Modal](#classes_ui_modal-Modal).
 */
export interface ModalConfig {
    /** Title to display in the header bar of the modal. */
    title: string;
    /** Requested width of the modal, in pixels. Depending on window size, this may not be honored exactly. */
    width: number;
    /** Requested height of the modal, in pixels. Depending on window size, this may not be honored exactly. */
    height: number;
    /** Content to display in the modal's iframe. This is set as the srcdoc on a sandboxed iframe. */
    content: string;
}
/**
 * Extend this class to show a custom modal to the user, whose contents are displayed in a sandboxed
 * iframe controlled by your extension.
 *
 * To pass a message to a script running in the modal, call sendMessage. The data you pass in will be
 * sent to the iframe with window.postMessage.
 *
 * To pass messages back from the modal to this class, call parent.postMessage from within the iframe.
 * The data sent will be passed along to the messageFromFrame implementation on your Modal class.
 */
export declare abstract class Modal extends IframeUI {
    private readonly config;
    private visible;
    constructor(client: EditorClient, config: ModalConfig);
    protected frameClosed(): void;
    show(): void;
    /**
     * If this modal is currently visible, close it, destroying the iframe.
     */
    hide(): void;
}
