"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockProxy = void 0;
const itemproxy_1 = require("./itemproxy");
/**
 * A block is a single shape on the document. A BlockProxy provides an interface to
 * read and write the content of an existing block, and is typically accessed through
 * [PageProxy.blocks](#classes_document_pageproxy-PageProxy_blocks) or another
 * similar mechanism.
 */
class BlockProxy extends itemproxy_1.ItemProxy {
    /**
     * @returns The class name of this block. This name is not necessarily human-readable,
     * and will remain consistent over time, e.g. "ProcessBlock"..
     */
    getClassName() {
        return this.properties.get('ClassName');
    }
    /**
     * @returns The amount this block is rotated around its own center, in radians.
     */
    getRotation() {
        return this.properties.get('Rotation');
    }
    /**
     * @returns An array of lines that have one or both endpoints connected to this block.
     */
    getConnectedLines() {
        const ids = this.client.sendCommand("gcl" /* GetConnectedLines */, this.id);
        return ids.map((id) => this.client.getLineProxy(id));
    }
    /**
     * Link a text area to a data field, so that editing the text area will also update the
     * associated data, and vice versa.
     *
     * To use this, first establish a reference key on this block with
     * [setReferenceKey](/extension-sdk/#classes_document_blockproxy-BlockProxy_setreferencekey).
     *
     * @param textAreaKey
     * @param referenceKey
     * @param field
     */
    linkText(textAreaKey, referenceKey, field) {
        if (!this.textAreas.keys().includes(textAreaKey)) {
            throw new Error('Invalid text area key');
        }
        if (!this.referenceKeys.keys().includes(referenceKey)) {
            throw new Error('Invalid reference key');
        }
        this.properties.set(textAreaKey + '_Link', {
            'ref': referenceKey,
            'f': field,
        });
    }
}
exports.BlockProxy = BlockProxy;
